import { NextApiRequest, NextApiResponse } from "next"
import { ObjectId } from "@mikro-orm/mongodb";
import { DataBase } from "../connectors";
import { wrap } from "@mikro-orm/core";
import { FactoryEndpoint } from ".";
import { EntityClass } from "@mikro-orm/core/typings";

export class UpdateEndpoint<T> extends FactoryEndpoint {
  constructor (
    private entity: EntityClass<T>
  ) {
    super()
  }

  async validate (item: Awaited<T>) {}

  async main (req: NextApiRequest, res: NextApiResponse<any>) {
    const db = new DataBase();
    await db.init();
    const dto: { 
      id: string,
      dateCreated?: number;
      dateUpdated?: number;
    } = JSON.parse(req.body);

    /** autogenerated values */
    delete dto.dateCreated;
    delete dto.dateUpdated;

    let item = await db.orm.em.findOne(this.entity, { _id: new ObjectId(dto.id) } as object);

    if (!item) {
      item = await db.orm.em.create(this.entity, {});
    }
    
    wrap(item).assign(dto);
    
    await this.validate(item);
    await db.orm.em.persistAndFlush(item);

    return wrap(item).toJSON();
  }
}